// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebCourierApi.Data;

#nullable disable

namespace WebCourierApi.Migrations
{
    [DbContext(typeof(WebCourierApiDbContext))]
    [Migration("20240104215533_set_database_types")]
    partial class set_database_types
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("WebCourierApi.POCO.CountryPOCO", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WebCourierApi.POCO.CurrencyPOCO", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("WebCourierApi.POCO.DeliveryPOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("InquireId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPending")
                        .HasColumnType("BIT");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("PricingBase")
                        .HasColumnType("MONEY");

                    b.Property<int>("PricingCurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PricingFees")
                        .HasColumnType("MONEY");

                    b.Property<decimal>("PricingTaxes")
                        .HasColumnType("MONEY");

                    b.ComplexProperty<Dictionary<string, object>>("Client", "WebCourierApi.POCO.DeliveryPOCO.Client#Client", b1 =>
                        {
                            b1.Property<string>("CompanyName")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("LastName")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("Id");

                    b.HasIndex("InquireId")
                        .IsUnique();

                    b.HasIndex("PricingCurrencyId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("WebCourierApi.POCO.InquirePOCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("DeliveryApartmentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeliveryBuildingNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeliveryCountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("DeliveryStreet")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryTown")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryZipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PickupApartmentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PickupBuildingNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PickupCountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("PickupDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("PickupStreet")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PickupTown")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PickupZipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("DeliveryOptions", "WebCourierApi.POCO.InquirePOCO.DeliveryOptions#DeliveryOptions", b1 =>
                        {
                            b1.Property<bool>("HighPriority")
                                .HasColumnType("BIT");

                            b1.Property<bool>("IsForCompany")
                                .HasColumnType("BIT");

                            b1.Property<bool>("WeekendDelivery")
                                .HasColumnType("BIT");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Package", "WebCourierApi.POCO.InquirePOCO.Package#Package", b1 =>
                        {
                            b1.Property<float>("HeightCM")
                                .HasColumnType("REAL");

                            b1.Property<float>("LengthCM")
                                .HasColumnType("REAL");

                            b1.Property<float>("WeightKG")
                                .HasColumnType("REAL");

                            b1.Property<float>("WidthCM")
                                .HasColumnType("REAL");
                        });

                    b.HasKey("Id");

                    b.HasIndex("DeliveryCountryId");

                    b.HasIndex("PickupCountryId");

                    b.ToTable("Inquiries");
                });

            modelBuilder.Entity("WebCourierApi.POCO.CountryPOCO", b =>
                {
                    b.HasOne("WebCourierApi.POCO.CurrencyPOCO", "Currency")
                        .WithMany("Countries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WebCourierApi.POCO.DeliveryPOCO", b =>
                {
                    b.HasOne("WebCourierApi.POCO.InquirePOCO", "Inquire")
                        .WithOne("DeliveryRequest")
                        .HasForeignKey("WebCourierApi.POCO.DeliveryPOCO", "InquireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebCourierApi.POCO.CurrencyPOCO", "PricingCurrency")
                        .WithMany("Deliveries")
                        .HasForeignKey("PricingCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WebCourierApi.POCO.DeliveryProcessPOCO", "Process", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<string>("DeliveryCourierName")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<int>("DeliveryRequestId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime?>("DeliveryTimestamp")
                                .HasColumnType("DATETIME");

                            b1.Property<bool>("IsDelivered")
                                .HasColumnType("BIT");

                            b1.Property<string>("Notes")
                                .HasMaxLength(500)
                                .HasColumnType("TEXT");

                            b1.Property<string>("PickupCourierName")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<DateTime?>("PickupTimestamp")
                                .HasColumnType("DATETIME");

                            b1.HasKey("Id");

                            b1.HasIndex("DeliveryRequestId")
                                .IsUnique();

                            b1.ToTable("Processes", (string)null);

                            b1.WithOwner("DeliveryRequest")
                                .HasForeignKey("DeliveryRequestId");

                            b1.Navigation("DeliveryRequest");
                        });

                    b.Navigation("Inquire");

                    b.Navigation("PricingCurrency");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("WebCourierApi.POCO.InquirePOCO", b =>
                {
                    b.HasOne("WebCourierApi.POCO.CountryPOCO", "DeliveryCountry")
                        .WithMany("DeliveryInquires")
                        .HasForeignKey("DeliveryCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebCourierApi.POCO.CountryPOCO", "PickupCountry")
                        .WithMany("PickupInquires")
                        .HasForeignKey("PickupCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("WebCourierApi.POCO.OfferPOCO", "Offers", b1 =>
                        {
                            b1.Property<int>("OfferNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("InquireId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("PricingBase")
                                .HasColumnType("MONEY");

                            b1.Property<int>("PricingCurrencyId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("PricingFees")
                                .HasColumnType("MONEY");

                            b1.Property<decimal>("PricingTaxes")
                                .HasColumnType("MONEY");

                            b1.Property<DateTime>("ValidTo")
                                .HasColumnType("DATETIME");

                            b1.HasKey("OfferNumber", "InquireId");

                            b1.HasIndex("InquireId");

                            b1.HasIndex("PricingCurrencyId");

                            b1.ToTable("Offers", (string)null);

                            b1.WithOwner("Inquire")
                                .HasForeignKey("InquireId");

                            b1.HasOne("WebCourierApi.POCO.CurrencyPOCO", "PricingCurrency")
                                .WithMany()
                                .HasForeignKey("PricingCurrencyId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Inquire");

                            b1.Navigation("PricingCurrency");
                        });

                    b.Navigation("DeliveryCountry");

                    b.Navigation("Offers");

                    b.Navigation("PickupCountry");
                });

            modelBuilder.Entity("WebCourierApi.POCO.CountryPOCO", b =>
                {
                    b.Navigation("DeliveryInquires");

                    b.Navigation("PickupInquires");
                });

            modelBuilder.Entity("WebCourierApi.POCO.CurrencyPOCO", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("WebCourierApi.POCO.InquirePOCO", b =>
                {
                    b.Navigation("DeliveryRequest");
                });
#pragma warning restore 612, 618
        }
    }
}
